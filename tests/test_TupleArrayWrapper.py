from unittest import TestCase

from src.numericalsolution.DataWrapper.tuple_array_wrapper import TupleArrayWrapper


class TupleArrayWrapperWithRoot:
    def __init__(self, taw, root):
        self.taw = taw
        self.root = root


class TupleArrayWrapperFactory:
    @staticmethod
    def create_taw_1():
        return TupleArrayWrapperWithRoot(TupleArrayWrapper(
            [(-100, 1.47234e-06), (-99, 1.46046e-06), (-98, 1.44838e-06), (-97, 1.43609e-06), (-96, 1.42358e-06),
             (-95, 1.41087e-06), (-94, 1.39793e-06), (-93, 1.38478e-06), (-92, 1.37141e-06), (-91, 1.35782e-06),
             (-90, 1.344e-06), (-89, 1.32995e-06), (-88, 1.31567e-06), (-87, 1.30115e-06), (-86, 1.28641e-06),
             (-85, 1.27142e-06), (-84, 1.25619e-06), (-83, 1.24072e-06), (-82, 1.225e-06), (-81, 1.20903e-06),
             (-80, 1.19282e-06), (-79, 1.17635e-06), (-78, 1.15962e-06), (-77, 1.14263e-06), (-76, 1.12538e-06),
             (-75, 1.10787e-06), (-74, 1.09009e-06), (-73, 1.07204e-06), (-72, 1.05372e-06), (-71, 1.03512e-06),
             (-70, 1.01624e-06), (-69, 9.97085e-07), (-68, 9.77644e-07), (-67, 9.57917e-07), (-66, 9.37901e-07),
             (-65, 9.17593e-07), (-64, 8.9699e-07), (-63, 8.76089e-07), (-62, 8.54888e-07), (-61, 8.33384e-07),
             (-60, 8.11573e-07), (-59, 7.89453e-07), (-58, 7.67021e-07), (-57, 7.44274e-07), (-56, 7.2121e-07),
             (-55, 6.97824e-07), (-54, 6.74114e-07), (-53, 6.50078e-07), (-52, 6.25712e-07), (-51, 6.01013e-07),
             (-50, 5.75978e-07), (-49, 5.50605e-07), (-48, 5.24889e-07), (-47, 4.98829e-07), (-46, 4.72421e-07),
             (-45, 4.45661e-07), (-44, 4.18548e-07), (-43, 3.91077e-07), (-42, 3.63246e-07), (-41, 3.35051e-07),
             (-40, 3.06489e-07), (-39, 2.77557e-07), (-38, 2.48253e-07), (-37, 2.18572e-07), (-36, 1.88512e-07),
             (-35, 1.58069e-07), (-34, 1.2724e-07), (-33, 9.60219e-08), (-32, 6.44114e-08), (-31, 3.24052e-08),
             (-30, 0), (-29, -3.28075e-08), (-28, -6.60206e-08), (-27, -9.96426e-08), (-26, -1.33677e-07),
             (-25, -1.68127e-07), (-24, -2.02996e-07), (-23, -2.38287e-07), (-22, -2.74004e-07), (-21, -3.10151e-07),
             (-20, -3.4673e-07), (-19, -3.83745e-07), (-18, -4.21199e-07), (-17, -4.59097e-07), (-16, -4.97441e-07),
             (-15, -5.36235e-07), (-14, -5.75482e-07), (-13, -6.15186e-07), (-12, -6.55351e-07), (-11, -6.9598e-07),
             (-10, -7.37077e-07), (-9, -7.78644e-07), (-8, -8.20687e-07), (-7, -8.63208e-07), (-6, -9.06211e-07),
             (-5, -9.49699e-07), (-4, -9.93677e-07), (-3, -1.03815e-06), (-2, -1.08312e-06), (-1, -1.12858e-06),
             (0, -1.17455e-06), (1, -1.22103e-06), (2, -1.26802e-06), (3, -1.31553e-06), (4, -1.36356e-06),
             (5, -1.4121e-06), (6, -1.46118e-06), (7, -1.51078e-06), (8, -1.56092e-06), (9, -1.61159e-06),
             (10, -1.66281e-06), (11, -1.71458e-06), (12, -1.76689e-06), (13, -1.81975e-06), (14, -1.87318e-06),
             (15, -1.92716e-06), (16, -1.98171e-06), (17, -2.03683e-06), (18, -2.09252e-06), (19, -2.14879e-06),
             (20, -2.20564e-06), (21, -2.26307e-06), (22, -2.32109e-06), (23, -2.37971e-06), (24, -2.43892e-06),
             (25, -2.49873e-06), (26, -2.55915e-06), (27, -2.62017e-06), (28, -2.68181e-06), (29, -2.74407e-06),
             (30, -2.80695e-06), (31, -2.87045e-06), (32, -2.93458e-06), (33, -2.99935e-06), (34, -3.06475e-06),
             (35, -3.1308e-06), (36, -3.19749e-06), (37, -3.26483e-06), (38, -3.33283e-06), (39, -3.40148e-06),
             (40, -3.4708e-06), (41, -3.54078e-06), (42, -3.61144e-06), (43, -3.68278e-06), (44, -3.75479e-06),
             (45, -3.82749e-06), (46, -3.90087e-06), (47, -3.97495e-06), (48, -4.04973e-06), (49, -4.12521e-06),
             (50, -4.20139e-06), (51, -4.27829e-06), (52, -4.3559e-06), (53, -4.43423e-06), (54, -4.51328e-06),
             (55, -4.59306e-06), (56, -4.67358e-06), (57, -4.75483e-06), (58, -4.83682e-06), (59, -4.91956e-06),
             (60, -5.00305e-06), (61, -5.0873e-06), (62, -5.1723e-06), (63, -5.25807e-06), (64, -5.34461e-06),
             (65, -5.43192e-06), (66, -5.52001e-06), (67, -5.60888e-06), (68, -5.69854e-06), (69, -5.78899e-06),
             (70, -5.88024e-06), (71, -5.97229e-06), (72, -6.06515e-06), (73, -6.15881e-06), (74, -6.2533e-06),
             (75, -6.3486e-06), (76, -6.44472e-06), (77, -6.54168e-06), (78, -6.63947e-06), (79, -6.7381e-06),
             (80, -6.83757e-06), (81, -6.93789e-06), (82, -7.03907e-06), (83, -7.1411e-06), (84, -7.244e-06),
             (85, -7.34776e-06), (86, -7.4524e-06), (87, -7.55791e-06), (88, -7.66431e-06), (89, -7.77159e-06),
             (90, -7.87977e-06), (91, -7.98884e-06), (92, -8.09882e-06), (93, -8.20971e-06), (94, -8.3215e-06),
             (95, -8.43422e-06), (96, -8.54785e-06), (97, -8.66241e-06), (98, -8.77791e-06), (99, -8.89434e-06),
             (100, -9.01172e-06), (101, -9.13004e-06), (102, -9.24932e-06), (103, -9.36955e-06), (104, -9.49074e-06),
             (105, -9.61291e-06), (106, -9.73604e-06), (107, -9.86016e-06), (108, -9.98526e-06), (109, -1.01113e-05),
             (110, -1.02384e-05), (111, -1.03665e-05), (112, -1.04956e-05), (113, -1.06257e-05), (114, -1.07568e-05),
             (115, -1.08889e-05), (116, -1.10221e-05), (117, -1.11562e-05), (118, -1.12915e-05), (119, -1.14277e-05),
             (120, -1.1565e-05), (121, -1.17034e-05), (122, -1.18428e-05), (123, -1.19833e-05), (124, -1.21248e-05),
             (125, -1.22674e-05), (126, -1.24111e-05), (127, -1.25559e-05), (128, -1.27018e-05), (129, -1.28488e-05),
             (130, -1.29968e-05), (131, -1.3146e-05), (132, -1.32963e-05), (133, -1.34477e-05), (134, -1.36002e-05),
             (135, -1.37539e-05), (136, -1.39086e-05), (137, -1.40646e-05), (138, -1.42216e-05), (139, -1.43798e-05),
             (140, -1.45392e-05), (141, -1.46998e-05), (142, -1.48615e-05), (143, -1.50243e-05), (144, -1.51884e-05),
             (145, -1.53536e-05), (146, -1.55201e-05), (147, -1.56877e-05), (148, -1.58565e-05), (149, -1.60265e-05),
             (150, -1.61978e-05), (151, -1.63702e-05), (152, -1.65439e-05), (153, -1.67188e-05), (154, -1.6895e-05),
             (155, -1.70724e-05), (156, -1.7251e-05), (157, -1.74309e-05), (158, -1.76121e-05), (159, -1.77945e-05),
             (160, -1.79782e-05), (161, -1.81631e-05), (162, -1.83494e-05), (163, -1.85369e-05), (164, -1.87258e-05),
             (165, -1.89159e-05), (166, -1.91073e-05), (167, -1.93001e-05), (168, -1.94941e-05), (169, -1.96895e-05),
             (170, -1.98863e-05), (171, -2.00843e-05), (172, -2.02837e-05), (173, -2.04845e-05), (174, -2.06866e-05),
             (175, -2.089e-05), (176, -2.10949e-05), (177, -2.13011e-05), (178, -2.15087e-05), (179, -2.17176e-05),
             (180, -2.1928e-05), (181, -2.21397e-05), (182, -2.23529e-05), (183, -2.25675e-05), (184, -2.27834e-05),
             (185, -2.30009e-05), (186, -2.32197e-05), (187, -2.344e-05), (188, -2.36617e-05), (189, -2.38848e-05),
             (190, -2.41094e-05), (191, -2.43355e-05), (192, -2.4563e-05), (193, -2.47921e-05), (194, -2.50225e-05),
             (195, -2.52545e-05), (196, -2.5488e-05), (197, -2.57229e-05), (198, -2.59594e-05), (199, -2.61974e-05), ]),
            -30)

    @staticmethod
    def create_taw_2():
        return TupleArrayWrapperWithRoot(TupleArrayWrapper(
            [(-100, 3784.36), (-99, 3741.1), (-98, 3697.84), (-97, 3654.58), (-96, 3611.32), (-95, 3568.06),
             (-94, 3524.8), (-93, 3481.54), (-92, 3438.28), (-91, 3395.02), (-90, 3351.76), (-89, 3308.5),
             (-88, 3265.24), (-87, 3221.98), (-86, 3178.73), (-85, 3135.47), (-84, 3092.21), (-83, 3048.95),
             (-82, 3005.69), (-81, 2962.43), (-80, 2919.17), (-79, 2875.91), (-78, 2832.65), (-77, 2789.39),
             (-76, 2746.13), (-75, 2702.87), (-74, 2659.61), (-73, 2616.35), (-72, 2573.1), (-71, 2529.84),
             (-70, 2486.58), (-69, 2443.32), (-68, 2400.06), (-67, 2356.8), (-66, 2313.54), (-65, 2270.28),
             (-64, 2227.02), (-63, 2183.76), (-62, 2140.5), (-61, 2097.24), (-60, 2053.98), (-59, 2010.72),
             (-58, 1967.47), (-57, 1924.21), (-56, 1880.95), (-55, 1837.69), (-54, 1794.43), (-53, 1751.17),
             (-52, 1707.91), (-51, 1664.65), (-50, 1621.39), (-49, 1578.13), (-48, 1534.87), (-47, 1491.61),
             (-46, 1448.35), (-45, 1405.09), (-44, 1361.83), (-43, 1318.58), (-42, 1275.32), (-41, 1232.06),
             (-40, 1188.8), (-39, 1145.54), (-38, 1102.28), (-37, 1059.02), (-36, 1015.76), (-35, 972.501),
             (-34, 929.242), (-33, 885.983), (-32, 842.723), (-31, 799.464), (-30, 756.205), (-29, 712.945),
             (-28, 669.686), (-27, 626.427), (-26, 583.167), (-25, 539.908), (-24, 496.649), (-23, 453.39),
             (-22, 410.13), (-21, 366.871), (-20, 323.612), (-19, 280.352), (-18, 237.093), (-17, 193.834),
             (-16, 150.574), (-15, 107.315), (-14, 64.0558), (-13, 20.7965), (-12, -22.4628), (-11, -65.7221),
             (-10, -108.981), (-9, -152.241), (-8, -195.5), (-7, -238.759), (-6, -282.019), (-5, -325.278),
             (-4, -368.537), (-3, -411.796), (-2, -455.056), (-1, -498.315), (0, -541.574), (1, -584.834),
             (2, -628.093), (3, -671.352), (4, -714.612), (5, -757.871), (6, -801.13), (7, -844.389), (8, -887.649),
             (9, -930.908), (10, -974.167), (11, -1017.43), (12, -1060.69), (13, -1103.95), (14, -1147.2),
             (15, -1190.46), (16, -1233.72), (17, -1276.98), (18, -1320.24), (19, -1363.5), (20, -1406.76),
             (21, -1450.02), (22, -1493.28), (23, -1536.54), (24, -1579.8), (25, -1623.06), (26, -1666.32),
             (27, -1709.58), (28, -1752.83), (29, -1796.09), (30, -1839.35), (31, -1882.61), (32, -1925.87),
             (33, -1969.13), (34, -2012.39), (35, -2055.65), (36, -2098.91), (37, -2142.17), (38, -2185.43),
             (39, -2228.69), (40, -2271.95), (41, -2315.21), (42, -2358.46), (43, -2401.72), (44, -2444.98),
             (45, -2488.24), (46, -2531.5), (47, -2574.76), (48, -2618.02), (49, -2661.28), (50, -2704.54),
             (51, -2747.8), (52, -2791.06), (53, -2834.32), (54, -2877.58), (55, -2920.84), (56, -2964.1),
             (57, -3007.35), (58, -3050.61), (59, -3093.87), (60, -3137.13), (61, -3180.39), (62, -3223.65),
             (63, -3266.91), (64, -3310.17), (65, -3353.43), (66, -3396.69), (67, -3439.95), (68, -3483.21),
             (69, -3526.47), (70, -3569.73), (71, -3612.98), (72, -3656.24), (73, -3699.5), (74, -3742.76),
             (75, -3786.02), (76, -3829.28), (77, -3872.54), (78, -3915.8), (79, -3959.06), (80, -4002.32),
             (81, -4045.58), (82, -4088.84), (83, -4132.1), (84, -4175.36), (85, -4218.61), (86, -4261.87),
             (87, -4305.13), (88, -4348.39), (89, -4391.65), (90, -4434.91), (91, -4478.17), (92, -4521.43),
             (93, -4564.69), (94, -4607.95), (95, -4651.21), (96, -4694.47), (97, -4737.73), (98, -4780.99),
             (99, -4824.25), (100, -4867.5), (101, -4910.76), (102, -4954.02), (103, -4997.28), (104, -5040.54),
             (105, -5083.8), (106, -5127.06), (107, -5170.32), (108, -5213.58), (109, -5256.84), (110, -5300.1),
             (111, -5343.36), (112, -5386.62), (113, -5429.88), (114, -5473.13), (115, -5516.39), (116, -5559.65),
             (117, -5602.91), (118, -5646.17), (119, -5689.43), (120, -5732.69), (121, -5775.95), (122, -5819.21),
             (123, -5862.47), (124, -5905.73), (125, -5948.99), (126, -5992.25), (127, -6035.51), (128, -6078.76),
             (129, -6122.02), (130, -6165.28), (131, -6208.54), (132, -6251.8), (133, -6295.06), (134, -6338.32),
             (135, -6381.58), (136, -6424.84), (137, -6468.1), (138, -6511.36), (139, -6554.62), (140, -6597.88),
             (141, -6641.14), (142, -6684.39), (143, -6727.65), (144, -6770.91), (145, -6814.17), (146, -6857.43),
             (147, -6900.69), (148, -6943.95), (149, -6987.21), (150, -7030.47), (151, -7073.73), (152, -7116.99),
             (153, -7160.25), (154, -7203.51), (155, -7246.77), (156, -7290.03), (157, -7333.28), (158, -7376.54),
             (159, -7419.8), (160, -7463.06), (161, -7506.32), (162, -7549.58), (163, -7592.84), (164, -7636.1),
             (165, -7679.36), (166, -7722.62), (167, -7765.88), (168, -7809.14), (169, -7852.4), (170, -7895.66),
             (171, -7938.91), (172, -7982.17), (173, -8025.43), (174, -8068.69), (175, -8111.95), (176, -8155.21),
             (177, -8198.47), (178, -8241.73), (179, -8284.99), (180, -8328.25), (181, -8371.51), (182, -8414.77),
             (183, -8458.03), (184, -8501.29), (185, -8544.54), (186, -8587.8), (187, -8631.06), (188, -8674.32),
             (189, -8717.58), (190, -8760.84), (191, -8804.1), (192, -8847.36), (193, -8890.62), (194, -8933.88),
             (195, -8977.14), (196, -9020.4), (197, -9063.66), (198, -9106.92), (199, -9150.18), ]),
            -12.519259442478265)


class TestTupleArrayWrapper(TestCase):
    def test_get_value_at(self):
        k = TupleArrayWrapper([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), ])
        self.assertRaises(ValueError, k.get_value_at, 0)

        self.assert_get_value(k, 6)
        self.assert_get_value(k, 2.5)
        self.assert_get_value(k, 5.6)

        for i in range(1, 6):
            self.assert_get_value(k, i)

    def assert_get_value(self, k, x):
        self.assertEqual(k.get_value_at(x), x * 10)
        self.assertEqual(k(x), x * 10)

    def test_get_value_at_negative_x(self):
        k = TupleArrayWrapper([(-5, -50), (-4, -40), (-3, -30), (-2, -20), (-1, -10), (0, 0), (1, 10), ])
        self.assertEqual(k.get_max_x(), 1)
        self.assertEqual(k.get_min_x(), -5)
        self.assertRaises(ValueError, k.get_value_at, 20)
        self.assert_get_value(k, -5)
        self.assert_get_value(k, -4.5)
        self.assert_get_value(k, -3.6)

        for i in range(-5, 1):
            self.assert_get_value(k, i)

    def test_get_value_at_very_small_x(self):
        tawr = TupleArrayWrapperFactory.create_taw_1()

        self.assertAlmostEqual(-1.17455e-06, tawr.taw.get_value_at(1e-30))
        self.assertAlmostEqual(-1.17455e-06, tawr.taw.get_value_at(-1e-30))
